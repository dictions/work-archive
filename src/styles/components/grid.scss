.grid-row {
	margin-left: $grid-gutter / -2;
	margin-right: $grid-gutter / -2;
	list-style: none;
	min-height: 1px;
	vertical-align: top;

	> .grid-col {
		vertical-align: top;
		display: inline-block;
		width: 100%;
		padding-left: $grid-gutter / 2;
		padding-right: $grid-gutter / 2;
		box-sizing: inherit;
		
		@include breakpoint(md) {
			font-size: 18px;
		}
	}
}

.grid-row.gutter--vertical {
	> .grid-col {
		padding-bottom: $grid-gutter;
	}
}

.grid-container {
	padding-left: $grid-gutter / 2;
	padding-right: $grid-gutter / 2;
	
	@include breakpoint(md) {
		padding-left: $grid-gutter;
		padding-right: $grid-gutter;
	}

	@include breakpoint(xl) {
		max-width: $grid-gutter * 2 + map-get($breakpoints, xl);
		margin-left: auto;
		margin-right: auto;
	}
}

// Alignment

.grid-row.align--right {
	text-align: right;

	> .grid-col {
		text-align: left;
	}
}

.grid-row.align--center {
	text-align: center;

	> .grid-col {
		text-align: left;
	}
}

.grid-row.align--middle {
	> .grid-col {
		vertical-align: middle;
	}
}

.grid-row.align--bottom {
	> .grid-col {
		vertical-align: bottom;
	}
}

// Column Direction
.grid-row.direction--rev {
	direction: rtl;
	text-align: left;

	> .grid-col {
		direction: ltr;
		text-align: left;
	}
}

// Column Sizes
@each $column-size in $column-sizes {
	@for $i from 0 through $column-size {
		.grid-col.c#{$i + '-' + $column-size} {
			width: (100% / $column-size) * $i;
		}
	}
}

// Responsive Column Sizes
@each $breakpoint-name, $breakpoint-size in $breakpoints {
	@media (min-width: #{$breakpoint-size}) {
		@each $column-size in $column-sizes {
			@for $i from 0 through $column-size {
				.grid-col.c#{$i + '-' + $column-size + '--' + $breakpoint-name} {
					width: (100% / $column-size) * $i;
				}
			}
		}
	}
}